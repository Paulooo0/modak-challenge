// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package sqlc

import (
	"context"
	"time"
)

const countNotificationsInTimeWindow = `-- name: CountNotificationsInTimeWindow :one
SELECT COUNT(*) as total
FROM notifications
WHERE user_id = $1
  AND type = $2
  AND created_at >= $3
`

type CountNotificationsInTimeWindowParams struct {
	UserID    string
	Type      string
	CreatedAt time.Time
}

func (q *Queries) CountNotificationsInTimeWindow(ctx context.Context, arg CountNotificationsInTimeWindowParams) (int64, error) {
	row := q.db.QueryRow(ctx, countNotificationsInTimeWindow, arg.UserID, arg.Type, arg.CreatedAt)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, type, message)
VALUES ($1, $2, $3)
RETURNING id, user_id, type, message, created_at
`

type CreateNotificationParams struct {
	UserID  string
	Type    string
	Message string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRow(ctx, createNotification, arg.UserID, arg.Type, arg.Message)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
